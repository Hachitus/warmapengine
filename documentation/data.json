{
    "project": {
        "name": "FlaTWorld",
        "description": "2D game engine for browsers",
        "version": "0.1.1",
        "url": "https://github.com/Hachitus/FlaTWorld"
    },
    "files": {
        "src\\components\\logger\\log.js": {
            "name": "src\\components\\logger\\log.js",
            "modules": {},
            "classes": {
                "log": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\UIs\\default\\default.js": {
            "name": "src\\components\\map\\UIs\\default\\default.js",
            "modules": {},
            "classes": {
                "UI_default": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\core\\baseEventlisteners\\baseEventlisteners.js": {
            "name": "src\\components\\map\\core\\baseEventlisteners\\baseEventlisteners.js",
            "modules": {},
            "classes": {
                "baseEventlisteners": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\core\\move\\mapDrag.js": {
            "name": "src\\components\\map\\core\\move\\mapDrag.js",
            "modules": {},
            "classes": {
                "mapDrag": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\core\\utils\\Quadtree.js": {
            "name": "src\\components\\map\\core\\utils\\Quadtree.js",
            "modules": {},
            "classes": {
                "utils.Quadtree": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\core\\utils\\dataManipulation.js": {
            "name": "src\\components\\map\\core\\utils\\dataManipulation.js",
            "modules": {},
            "classes": {
                "utils.dataManipulation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\core\\utils\\effects.js": {
            "name": "src\\components\\map\\core\\utils\\effects.js",
            "modules": {},
            "classes": {
                "utils.effects": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\core\\utils\\utils.js": {
            "name": "src\\components\\map\\core\\utils\\utils.js",
            "modules": {},
            "classes": {
                "utils.mouse": 1,
                "utils.resize": 1,
                "utils.environment": 1,
                "utils.general": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\core\\zoom\\mapZoom.js": {
            "name": "src\\components\\map\\core\\zoom\\mapZoom.js",
            "modules": {},
            "classes": {
                "mapZoom": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\core\\Map.js": {
            "name": "src\\components\\map\\core\\Map.js",
            "modules": {},
            "classes": {
                "Map": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\core\\MapDataManipulator.js": {
            "name": "src\\components\\map\\core\\MapDataManipulator.js",
            "modules": {},
            "classes": {
                "MapDataManipulator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\core\\MapLayers.js": {
            "name": "src\\components\\map\\core\\MapLayers.js",
            "modules": {},
            "classes": {
                "MapLayer": 1,
                "MapLayerParent": 1,
                "MapSubcontainer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\core\\ObjectManager.js": {
            "name": "src\\components\\map\\core\\ObjectManager.js",
            "modules": {},
            "classes": {
                "ObjectManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\core\\Objects.js": {
            "name": "src\\components\\map\\core\\Objects.js",
            "modules": {},
            "classes": {
                "Object_sprite": 1,
                "ObjectSpriteTerrain": 1,
                "ObjectSpriteUnit": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\core\\UI.js": {
            "name": "src\\components\\map\\core\\UI.js",
            "modules": {},
            "classes": {
                "UI": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\core\\UI_themeBase.js": {
            "name": "src\\components\\map\\core\\UI_themeBase.js",
            "modules": {},
            "classes": {
                "UI_templateBase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\core\\eventlisteners.js": {
            "name": "src\\components\\map\\core\\eventlisteners.js",
            "modules": {},
            "classes": {
                "eventListeners": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\core\\mapEvents.js": {
            "name": "src\\components\\map\\core\\mapEvents.js",
            "modules": {},
            "classes": {
                "mapEvents": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\extensions\\hexagons\\eventListeners\\select.js": {
            "name": "src\\components\\map\\extensions\\hexagons\\eventListeners\\select.js",
            "modules": {},
            "classes": {
                "hexagonPlugin.setupHexagonClick": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\extensions\\hexagons\\utils\\createHexagon.js": {
            "name": "src\\components\\map\\extensions\\hexagons\\utils\\createHexagon.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\extensions\\hexagons\\utils\\hexagonMath.js": {
            "name": "src\\components\\map\\extensions\\hexagons\\utils\\hexagonMath.js",
            "modules": {},
            "classes": {
                "hexagonPlugin.utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\extensions\\hexagons\\Objects.js": {
            "name": "src\\components\\map\\extensions\\hexagons\\Objects.js",
            "modules": {},
            "classes": {
                "hexagonPlugin.ObjectHexaTerrain": 1,
                "hexagonPlugin.ObjectHexaUnit": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\extensions\\hexagons\\selectHexagonPlugin.js": {
            "name": "src\\components\\map\\extensions\\hexagons\\selectHexagonPlugin.js",
            "modules": {},
            "classes": {
                "hexagonPlugin.setupObject_select_hexagon": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\extensions\\mapMovement\\mapMovement.js": {
            "name": "src\\components\\map\\extensions\\mapMovement\\mapMovement.js",
            "modules": {},
            "classes": {
                "mapMovement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\map\\extensions\\mapMovement\\mapMovementWorker.js": {
            "name": "src\\components\\map\\extensions\\mapMovement\\mapMovementWorker.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\preloading\\preloading.js": {
            "name": "src\\components\\preloading\\preloading.js",
            "modules": {},
            "classes": {
                "Preload": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\utilities\\environment.js": {
            "name": "src\\components\\utilities\\environment.js",
            "modules": {},
            "classes": {
                "utilities.environmentDetections": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\utilities\\general.js": {
            "name": "src\\components\\utilities\\general.js",
            "modules": {},
            "classes": {
                "utilities.arrays": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\components\\utilities\\polyfills.js": {
            "name": "src\\components\\utilities\\polyfills.js",
            "modules": {},
            "classes": {
                "generalUtils.polyfills": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "log": {
            "name": "log",
            "shortname": "log",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\logger\\log.js",
            "line": 10,
            "requires": [
                "loglevel.js for frontend logging",
                "or something similar"
            ]
        },
        "UI_default": {
            "name": "UI_default",
            "shortname": "UI_default",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\UIs\\default\\default.js",
            "line": 27,
            "description": "The simplest default UI implementation. Implemented UI functionalities for: showSelections, highlightSelectedObject",
            "is_constructor": 1,
            "requires": [
                "Handlebars",
                "jQuery"
            ],
            "todo": [
                "should take jQuery away from this",
                "as soon as we refactor the animations and graphics for selections"
            ],
            "params": [
                {
                    "name": "modal",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "map",
                    "description": "",
                    "type": "Map"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "baseEventlisteners": {
            "name": "baseEventlisteners",
            "shortname": "baseEventlisteners",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\baseEventlisteners\\baseEventlisteners.js",
            "line": 18,
            "description": "Core plugin. Houses the default eventlisteners used in the map. When plugins are added to the map this class can be used for the eventlistener management.",
            "requires": [
                "Hammer.js (for touch events)",
                "Hamster.js (for good cross-browser mousewheel events)"
            ],
            "params": [
                {
                    "name": "canvasElement",
                    "description": "The canvas element we listen events from. Will try to search the first canvas in the DOM, if none is provided",
                    "type": "HTMLElement"
                }
            ]
        },
        "mapDrag": {
            "name": "mapDrag",
            "shortname": "mapDrag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\move\\mapDrag.js",
            "line": 16,
            "description": "Core plugin for the engine. Handles moving the map by dragging the map with mouse or touch event. Core plugins can always be overwrote if needed.",
            "requires": [
                "Hammer.js - Mobile part requires"
            ],
            "return": {
                "description": "init, _startDragListener",
                "type": "Object"
            }
        },
        "utils.Quadtree": {
            "name": "utils.Quadtree",
            "shortname": "utils.Quadtree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\utils\\Quadtree.js",
            "line": 12,
            "description": "NOTE! NOT IN USE AT THE MOMENT. THIS WAS LESS EFFICIENT THAN USING SUBCONTAINERS, SO IT WILL BE USED IN THE FUTURE IF NEEDED.\n\nThis class handles the API for quadtree to search for the wanted objects on the certain coordinates. After this\nthe map should do it's own - more precise - hit detections.",
            "is_constructor": 1,
            "requires": [
                "Quadtree-js. Though this base library can be changed easily"
            ],
            "params": [
                {
                    "name": "options",
                    "description": "options for the QuadModule",
                    "type": "Object"
                },
                {
                    "name": "max",
                    "description": "How many levels deep",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Quadtree instance"
            }
        },
        "utils.dataManipulation": {
            "name": "utils.dataManipulation",
            "shortname": "utils.dataManipulation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\utils\\dataManipulation.js",
            "line": 11,
            "description": "These are utils for manipulating the data, that our classes and functions use.",
            "return": {
                "description": "mapObjectsToArray, flattenArrayBy1Level",
                "type": "Object"
            }
        },
        "utils.effects": {
            "name": "utils.effects",
            "shortname": "utils.effects",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\utils\\effects.js",
            "line": 11,
            "description": "This module will hold the most common graphical effects used in the map. It is still very stub as the development\nhasn't proceeded to this stage yet.",
            "return": {
                "description": "init, _startDragListener",
                "type": "Object"
            }
        },
        "utils.mouse": {
            "name": "utils.mouse",
            "shortname": "utils.mouse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\utils\\utils.js",
            "line": 10,
            "return": {
                "description": "isRightClick, eventData.getPointerCoords, eventData.getHAMMERPointerCoords, eventMouseCoords",
                "type": "Object"
            }
        },
        "utils.resize": {
            "name": "utils.resize",
            "shortname": "utils.resize",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\utils\\utils.js",
            "line": 93,
            "return": {
                "description": "toggleFullScreen, setToFullSize, getWindowSize",
                "type": "Object"
            }
        },
        "utils.environment": {
            "name": "utils.environment",
            "shortname": "utils.environment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\utils\\utils.js",
            "line": 177,
            "return": {
                "description": "getPixelRatio",
                "type": "Object"
            }
        },
        "utils.general": {
            "name": "utils.general",
            "shortname": "utils.general",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\utils\\utils.js",
            "line": 204,
            "return": {
                "description": "pixelEpsilonEquality",
                "type": "Object"
            }
        },
        "mapZoom": {
            "name": "mapZoom",
            "shortname": "mapZoom",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\zoom\\mapZoom.js",
            "line": 16,
            "description": "Core plugin for the engine. Handles zooming for the map. Core plugins can always be overwrote if needed. Zooming happens when the user scrolls the mousewheel or in mobile, pinches the screen.",
            "return": {
                "description": "init",
                "type": "Object"
            }
        },
        "Map": {
            "name": "Map",
            "shortname": "Map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\Map.js",
            "line": 23,
            "description": "#Main class for the engine\n\nInitializes the whole structure and plugins and is used as primary API for all operations. This class is e.g. passed to every plugin that get initialized with their init-method.\n\nYou use the class by instantiating it (new) and then finishing initialization with init-method. Please see examples below.\n\nThe biggest part of creating the map, is the data structure. There is a clear data structure that you can see from the tests/data-folder, but the factory is responsible for creating the objects, so you can use your own factory implementation. So to understand more, please see e.g. factories.horizontalHexaFactory.\n\nThe map consists of layer on top of each other. The example is best understood when thinking typical war strategy game. The structure is this:\n1. StaticLayer: Handles things like scaling / zooming the map\n2. MovableLayer: Obviously handles movement of the map. Also is a good place to get map coordinates. Since getting global coordinates won't help you much, half of the time.\n3. Different layers: like units, terrain, fog of war, UIs etc. Can also contains special layers like dynamically changed UIlayers.\n4. possible subcontainers (used for optimized object selection and map movement). Can also contains special layers like dynamically changed UIlayers.\n5. Individual objects, like units, terrains, cities etc...\n\nPlugins can be added with activatePlugins-method by sending them to the class. Plugins must always implement init-method, which receives Map instance. Plugins are not yet restricted what they can do and can add functionality without touching map or can modify objects or their prototypes through access to Map instance.",
            "example": [
                "\n    var map = new Map(divContainer, mapOptions );\n    promises = map.init( gameData.pluginsToActivate, mapData.startPoint );"
            ],
            "is_constructor": 1,
            "requires": [
                "PIXI.JS framework in global namespace",
                "Canvas (webGL support recommended) HTML5-element supported.",
                "Hammer for touch events",
                "Hamster for mouse scroll events"
            ],
            "params": [
                {
                    "name": "canvasContainer",
                    "description": "HTML element which will be container for the created canvas element. REQUIRED",
                    "type": "HTMLElement"
                },
                {
                    "name": "props",
                    "description": "Extra properties",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bounds",
                            "description": "Bounds of the map / mapSize",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "width",
                                    "description": "Bound width",
                                    "type": "Integer"
                                },
                                {
                                    "name": "height",
                                    "description": "Bound height",
                                    "type": "Integer"
                                }
                            ]
                        },
                        {
                            "name": "rendererOptions",
                            "description": "Renderer options passed to PIXI.autoDetectRenderer",
                            "type": "Object"
                        },
                        {
                            "name": "subcontainers",
                            "description": "Subcontainers size in pixels. If given, will activate subcontainers. If not given or false, subcontainers are not used.area.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "width",
                                    "description": "Subcontainer width",
                                    "type": "Integer"
                                },
                                {
                                    "name": "height",
                                    "description": "Subcontainer height",
                                    "type": "Integer"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "trackFPSCB",
                    "description": "Callback function for tracking FPS in renderer. So this is used for debugging and optimizing.",
                    "type": "FPSCallback"
                }
            ],
            "return": {
                "description": "New Map instance",
                "type": "Object"
            }
        },
        "MapDataManipulator": {
            "name": "MapDataManipulator",
            "shortname": "MapDataManipulator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\MapDataManipulator.js",
            "line": 9,
            "description": "Class to get a consistent standard for the engine to be able to filter objects, when retrieving or sorting them.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "rules",
                    "description": "REQUIRED. The rules that apply for this instance. Multiple rules in Array or one as Object.",
                    "type": "Array|Object"
                }
            ]
        },
        "MapLayer": {
            "name": "MapLayer",
            "shortname": "MapLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 12,
            "description": "Creates a basic layer for the Map. This type of layer can not hold subcontainers. Note that different devices and graphic cards can only have specific size of bitmap drawn, and PIXI cache always draws a bitmap thus the default is: 4096, based on this site: http://webglstats.com/ and MAX_TEXTURE_SIZE. This is important also when caching.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "optional options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "Layers name, used for identifying the layer. Useful in debugging, but can be used for finding correct layers too",
                            "type": "String"
                        },
                        {
                            "name": "coord",
                            "description": "coord starting coords of layer. Relative to parent map layer.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "x",
                                    "description": "X coordinate",
                                    "type": "Integer"
                                },
                                {
                                    "name": "y",
                                    "description": "Y coordinate",
                                    "type": "Integer"
                                }
                            ]
                        },
                        {
                            "name": "specialLayer",
                            "description": "Is this layer special (e.g. UILayer not included in normal operations)",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "x",
                                    "description": "X coordinate",
                                    "type": "Integer"
                                },
                                {
                                    "name": "y",
                                    "description": "Y coordinate",
                                    "type": "Integer"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "MapLayerParent": {
            "name": "MapLayerParent",
            "shortname": "MapLayerParent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 230,
            "description": "Layer designed to hold subcontainers. But can handle objects too. Different devices graphic cards can only have specific size of bitmap drawn, and PIXI cache always draws a bitmap. Thus the default is: 4096, based on this site: http://webglstats.com/ and MAX_TEXTURE_SIZE",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "name layer property name, used for identifiying the layer, usefull in debugging, but used also otherwise too",
                            "type": "String"
                        },
                        {
                            "name": "coord",
                            "description": "starting coords of layer. Relative to parent map layer.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "x",
                                    "description": "X coordinate",
                                    "type": "Integer"
                                },
                                {
                                    "name": "y",
                                    "description": "Y coordinate",
                                    "type": "Integer"
                                }
                            ]
                        },
                        {
                            "name": "subcontainers",
                            "description": "Subontainer size. If given activated subcontainers, otherwise not.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "width",
                                    "description": "width (in pixels)",
                                    "type": "Integer"
                                },
                                {
                                    "name": "height",
                                    "description": "height (in pixels)",
                                    "type": "Integer"
                                }
                            ]
                        },
                        {
                            "name": "specialLayer",
                            "description": "Is this special layer or not.",
                            "type": "Boolean"
                        }
                    ]
                }
            ]
        },
        "MapSubcontainer": {
            "name": "MapSubcontainer",
            "shortname": "MapSubcontainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 316,
            "description": "Subcontainers are containers that hold objects like units and terrain etc. under them. They have some restrictions atm. since they are PIXI.ParticleContainers. But when needed we can extend MapLayers with another class which is subcontainer, but not ParticleContainer at the present there is no need, so we won't extend yet. Subcontainers help the layers to make better movement of the map, by making subcontainers visible or invisible and even helping with selecting objects on the map. Thus we don't need to use our inefficient Quadtree. The intention was to use PIXI.ParticleContainer for this, but it seems it doesn't clean up the memory afterwards the same way as normal Container.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "size",
                    "description": "Subontainer size. If given activated subcontainers, otherwise not.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "width",
                            "description": "width (in pixels)",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "height (in pixels)",
                            "type": "Integer"
                        }
                    ]
                }
            ]
        },
        "ObjectManager": {
            "name": "ObjectManager",
            "shortname": "ObjectManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\ObjectManager.js",
            "line": 13,
            "description": "this module is responsible for doing hitTesting, like returning the units on certain clicked coordinates or when objects or areas collide with each other.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "hitDetector",
                    "description": "Object or function that handles hit detection. This can be omitted in many cases",
                    "type": "Object"
                }
            ],
            "todo": [
                "It might be a good idea to make the hitDetection more extensive. Now it just uses point or rectangle / bounds to detect hits. It could use sprites or forms."
            ]
        },
        "Object_sprite": {
            "name": "Object_sprite",
            "shortname": "Object_sprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\Objects.js",
            "line": 12,
            "description": "The base class of all sprite objects",
            "is_constructor": 1,
            "extends": "PIXI.Sprite",
            "params": [
                {
                    "name": "coords",
                    "description": "the coordinate where the object is located at, relative to it's parent",
                    "type": "PIXI.Point"
                },
                {
                    "name": "data",
                    "description": "objects data, that will be used in the game. It will not actually be mainly used in graphical but rather things  like unit-data and city-data presentations etc.",
                    "type": "Object"
                },
                {
                    "name": "options.currFrame",
                    "description": "currFrame the current frames number. This is basically the initial image, we can change it later for animation or such",
                    "type": "Object"
                }
            ]
        },
        "ObjectSpriteTerrain": {
            "name": "ObjectSpriteTerrain",
            "shortname": "ObjectSpriteTerrain",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\Objects.js",
            "line": 172,
            "description": "Terrain tile like desert or mountain, non-movable and cacheable. Normally, but not necessarily, these are\ninherited, depending on the map type. For example you might want to add some click area for these",
            "is_constructor": 1,
            "extends": "Object_sprite",
            "params": [
                {
                    "name": "coords",
                    "description": "format: {x: Number, y: Number}. Coordinates for the object relative to it's parent",
                    "type": "Coordinates"
                },
                {
                    "name": "data",
                    "description": "This units custom data",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "other specific options for constructing this terrain",
                    "type": "Object"
                }
            ]
        },
        "ObjectSpriteUnit": {
            "name": "ObjectSpriteUnit",
            "shortname": "ObjectSpriteUnit",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\Objects.js",
            "line": 193,
            "description": "Map unit like infantry or worker, usually something with actions or movable. Usually these are extended, depending on the map type. For example you might want to add some click area for these (e.g. hexagon)",
            "is_constructor": 1,
            "extends": "Object_sprite",
            "requires": [
                "graphics"
            ],
            "params": [
                {
                    "name": "coords",
                    "description": "Coordinates for the object relative to it's parent",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "data",
                    "description": "This units data",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "other specific options for constructing this unit, like options.throwShadow",
                    "type": "Object",
                    "props": [
                        {
                            "name": "throwShadow",
                            "description": "Can we throw a shadow under this object",
                            "type": "Object"
                        }
                    ]
                }
            ]
        },
        "UI": {
            "name": "UI",
            "shortname": "UI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\UI.js",
            "line": 16,
            "description": "Main class for showing UI on the map. Like unit selections and such. Has nothing to do with showing off-map data.\nGood examples for what this shows are: selected units-list, selection highlight (like a circle on the selected unit) and bringing the unit on top in the map. UI themes must implement this core UI module",
            "todo": [
                "Not implemented fully yet and probably need refactoring"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "UITheme",
                    "description": "Module that will be used for the UI theme",
                    "type": "Object"
                },
                {
                    "name": "givenMap",
                    "description": "Map instance that is used",
                    "type": "Map"
                }
            ],
            "return": {
                "description": "UI module",
                "type": "Object"
            }
        },
        "UI_templateBase": {
            "name": "UI_templateBase",
            "shortname": "UI_templateBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\UI_themeBase.js",
            "line": 17,
            "description": "The template base class for UI templates",
            "todo": [
                "This needs a bit of redesign."
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "CSSClasses",
                    "description": "",
                    "type": "*"
                }
            ]
        },
        "eventListeners": {
            "name": "eventListeners",
            "shortname": "eventListeners",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\eventlisteners.js",
            "line": 24,
            "description": "This keeps all the event listeners and detectors in one class. You add detectors / event listener types with addDetector and you add event listeners with on."
        },
        "mapEvents": {
            "name": "mapEvents",
            "shortname": "mapEvents",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\core\\mapEvents.js",
            "line": 11,
            "description": "This module handles map events. Like informing map movement, object selection and other changes.\nEvents atm:\n- mapMoved\n- mapResize\n- mapFullscreeActivated",
            "return": {
                "description": "subsribe and publish",
                "type": "Object"
            },
            "todo": [
                "I want the pubsub module to go the ES6 way",
                "not the only global exception!"
            ]
        },
        "hexagonPlugin.setupHexagonClick": {
            "name": "hexagonPlugin.setupHexagonClick",
            "shortname": "hexagonPlugin.setupHexagonClick",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\extensions\\hexagons\\eventListeners\\select.js",
            "line": 16,
            "description": "Handles the eventlistner for selecting objects on the map. THe actual logic for detecting the objects under mouse\netc. are in selectHexagonPlugin",
            "requires": [
                "Hammer.js. Some events are done with Hammer.js",
                "so we need it to handle those events correctly"
            ],
            "params": [
                {
                    "name": "map",
                    "description": "The currently use Map instance",
                    "type": "Map"
                }
            ],
            "return": {
                "description": "True",
                "type": "Boolean"
            }
        },
        "hexagonPlugin.utils": {
            "name": "hexagonPlugin.utils",
            "shortname": "hexagonPlugin.utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\extensions\\hexagons\\utils\\hexagonMath.js",
            "line": 17,
            "description": "Utility module, for making different calculations and tests when hexagon based grid map in use"
        },
        "hexagonPlugin.ObjectHexaTerrain": {
            "name": "hexagonPlugin.ObjectHexaTerrain",
            "shortname": "hexagonPlugin.ObjectHexaTerrain",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\extensions\\hexagons\\Objects.js",
            "line": 24,
            "description": "Terrain tile like desert or mountain, non-movable and cacheable. Normally, but not necessarily, these are inherited, depending on the map type. For example you might want to add some click area for these",
            "is_constructor": 1,
            "params": [
                {
                    "name": "coords",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "data",
                    "description": "This units custom data",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "options.radius REQUIRED.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "radius",
                            "description": "REQUIRED. This is the radius of the game maps hexagon.",
                            "type": "Number"
                        }
                    ]
                }
            ]
        },
        "hexagonPlugin.ObjectHexaUnit": {
            "name": "hexagonPlugin.ObjectHexaUnit",
            "shortname": "hexagonPlugin.ObjectHexaUnit",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\extensions\\hexagons\\Objects.js",
            "line": 47,
            "description": "Map unit like infantry or worker, usually something with actions or movable. Usually these are extended, depending on the map type. For example you might want to add some click area for these (e.g. hexagon)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "coords",
                    "description": "This units coordinates, relative to it's parent container",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "data",
                    "description": "This units custom data",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "options.radius REQUIRED",
                    "type": "Object",
                    "props": [
                        {
                            "name": "radius",
                            "description": "REQUIRED. This is the radius of the game maps hexagon",
                            "type": "Object"
                        }
                    ]
                }
            ]
        },
        "hexagonPlugin.setupObject_select_hexagon": {
            "name": "hexagonPlugin.setupObject_select_hexagon",
            "shortname": "hexagonPlugin.setupObject_select_hexagon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\extensions\\hexagons\\selectHexagonPlugin.js",
            "line": 17,
            "description": "Handles the selection of hexagons on the map",
            "return": {
                "description": "Return methods inside object",
                "type": "Object"
            }
        },
        "mapMovement": {
            "name": "mapMovement",
            "shortname": "mapMovement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\map\\extensions\\mapMovement\\mapMovement.js",
            "line": 24
        },
        "Preload": {
            "name": "Preload",
            "shortname": "Preload",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\preloading\\preloading.js",
            "line": 13,
            "description": "Preloads assets before initializing map.",
            "is_constructor": 1,
            "todo": [
                "should you use PIXI here or just https://github.com/englercj/resource-loader straight?"
            ]
        },
        "utilities.environmentDetections": {
            "name": "utilities.environmentDetections",
            "shortname": "utilities.environmentDetections",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\utilities\\environment.js",
            "line": 11,
            "return": {
                "description": "Holds methods in this class",
                "type": "Object"
            }
        },
        "utilities.arrays": {
            "name": "utilities.arrays",
            "shortname": "utilities.arrays",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\utilities\\general.js",
            "line": 11,
            "description": "Array manipulation"
        },
        "generalUtils.polyfills": {
            "name": "generalUtils.polyfills",
            "shortname": "generalUtils.polyfills",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\components\\utilities\\polyfills.js",
            "line": 12,
            "description": "Add polyfills for the map, as necessary. Easy to drop out.",
            "return": {
                "description": "arrayFind, objectAssign",
                "type": "Object"
            }
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src\\components\\map\\UIs\\default\\default.js",
            "line": 49,
            "itemtype": "method",
            "name": "getTemplates\nRequired by the map/core/UI.js API",
            "class": "UI_default"
        },
        {
            "file": "src\\components\\map\\UIs\\default\\default.js",
            "line": 56,
            "description": "Required by the map.UI API",
            "itemtype": "method",
            "name": "showSelections",
            "params": [
                {
                    "name": "objects",
                    "description": "Objects that have been selected. See core.UI for more information",
                    "type": "Object"
                },
                {
                    "name": "getDatas",
                    "description": "See explanation in core.UI",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Extra options",
                    "type": "Object"
                }
            ],
            "class": "UI_default"
        },
        {
            "file": "src\\components\\map\\UIs\\default\\default.js",
            "line": 101,
            "description": "Required by the map.UI API",
            "itemtype": "method",
            "name": "highlightSelectedObject",
            "params": [
                {
                    "name": "object",
                    "description": "Object that has been selected. See core.UI for more information",
                    "type": "Object"
                },
                {
                    "name": "getDatas",
                    "description": "See explanation in core.UI",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Extra options. Like dropping a shadow etc.",
                    "type": "Object"
                }
            ],
            "class": "UI_default"
        },
        {
            "file": "src\\components\\map\\UIs\\default\\default.js",
            "line": 139,
            "itemtype": "method",
            "name": "showUnitMovement",
            "class": "UI_default"
        },
        {
            "file": "src\\components\\map\\UIs\\default\\default.js",
            "line": 143,
            "itemtype": "method",
            "name": "init",
            "class": "UI_default"
        },
        {
            "file": "src\\components\\map\\UIs\\default\\default.js",
            "line": 151,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "_highlightSelectedObject",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "movableLayer",
                    "description": "",
                    "type": "MapLayer"
                },
                {
                    "name": "renderer",
                    "description": "",
                    "type": "PIXI.Renderer"
                }
            ],
            "class": "UI_default"
        },
        {
            "file": "src\\components\\map\\UIs\\default\\default.js",
            "line": 176,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "createHighlight",
            "class": "UI_default"
        },
        {
            "file": "src\\components\\map\\UIs\\default\\default.js",
            "line": 213,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "_get$Element",
            "params": [
                {
                    "name": "which",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "UI_default"
        },
        {
            "file": "src\\components\\map\\core\\baseEventlisteners\\baseEventlisteners.js",
            "line": 59,
            "description": "Sets the canvas to fullsize as in the same size of the window / content area. But not fullscreen. Note that",
            "itemtype": "method",
            "name": "fullSizeListener",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "baseEventlisteners"
        },
        {
            "file": "src\\components\\map\\core\\baseEventlisteners\\baseEventlisteners.js",
            "line": 76,
            "description": "Sets the browser in fullscreen mode.",
            "itemtype": "method",
            "name": "toggleFullscreen",
            "static": 1,
            "params": [
                {
                    "name": "cb",
                    "description": "Callback that fires when this event activates",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Return the state of this event",
                "type": "Boolean"
            },
            "class": "baseEventlisteners"
        },
        {
            "file": "src\\components\\map\\core\\baseEventlisteners\\baseEventlisteners.js",
            "line": 94,
            "description": "Zoom the map. Mousewheel (desktop) and pinch (mobile)",
            "itemtype": "method",
            "name": "toggleZoomListener",
            "static": 1,
            "params": [
                {
                    "name": "cb",
                    "description": "Callback that fires when this event activates",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Return the state of this event",
                "type": "Boolean"
            },
            "class": "baseEventlisteners"
        },
        {
            "file": "src\\components\\map\\core\\baseEventlisteners\\baseEventlisteners.js",
            "line": 118,
            "description": "DragListener (normally used for moving the map)",
            "itemtype": "method",
            "name": "toggleDragListener",
            "static": 1,
            "params": [
                {
                    "name": "cb",
                    "description": "Callback that fires when this event activates",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Return the state of this event",
                "type": "Boolean"
            },
            "class": "baseEventlisteners"
        },
        {
            "file": "src\\components\\map\\core\\baseEventlisteners\\baseEventlisteners.js",
            "line": 141,
            "description": "Selecting something from the map",
            "itemtype": "method",
            "name": "toggleSelectListener",
            "static": 1,
            "params": [
                {
                    "name": "cb",
                    "description": "Callback that fires when this event activates",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Return the state of this event",
                "type": "Boolean"
            },
            "class": "baseEventlisteners"
        },
        {
            "file": "src\\components\\map\\core\\move\\mapDrag.js",
            "line": 41,
            "description": "Required init functions for the plugin",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "mapObj",
                    "description": "The current instance of Map class",
                    "type": "Map"
                }
            ],
            "class": "mapDrag"
        },
        {
            "file": "src\\components\\map\\core\\move\\mapDrag.js",
            "line": 57,
            "description": "Mobile version. Starts the functionality, uses Hammer.js heavily for doing the drag. More simple and better than\ndesktop version, since we don't need to calculate the drag with several event listener, one is enough with Hammer",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "_startDragListener",
            "params": [
                {
                    "name": "map",
                    "description": "The current instance of Map class",
                    "type": "Map"
                }
            ],
            "class": "mapDrag"
        },
        {
            "file": "src\\components\\map\\core\\move\\mapDrag.js",
            "line": 99,
            "description": "This handles offset Changes and setting data has map been moved based on it. Also\nsets basic settings like preventDefault etc.",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "_mapMovement",
            "params": [
                {
                    "name": "e",
                    "description": "The event being dealt with",
                    "type": "Event"
                },
                {
                    "name": "map",
                    "description": "The current instance of Map class",
                    "type": "Map"
                },
                {
                    "name": "coords",
                    "description": "Current pointer coordinates",
                    "type": "Coordinates"
                }
            ],
            "class": "mapDrag"
        },
        {
            "file": "src\\components\\map\\core\\move\\mapDrag.js",
            "line": 132,
            "description": "Function for setting and getting the mouse offset.\nOffset is the distance from the left upper coordinates (global 0, 0 coordinates) on the canvas, to the current /\nlast known mouse coordinates",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "_offsetCoords",
            "class": "mapDrag"
        },
        {
            "file": "src\\components\\map\\core\\utils\\Quadtree.js",
            "line": 31,
            "description": "Add an object to the quadtree.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "coords",
                    "description": "Coordinates on the global / canvas element.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "size",
                    "description": "You can use bounds for the object \"hit\" detection",
                    "type": "Object",
                    "props": [
                        {
                            "name": "width",
                            "description": "Width (in pixels)",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "Height (in pixels)",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "data",
                    "description": "Objects extra custom data. This is optional.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Quadtree instance"
            },
            "class": "utils.Quadtree"
        },
        {
            "file": "src\\components\\map\\core\\utils\\Quadtree.js",
            "line": 49,
            "description": "Remove an object from the quadtree.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "coords",
                    "description": "Coordinates on the global / canvas element.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "size",
                    "description": "You can use bounds for the object \"hit\" detection",
                    "type": "Object",
                    "props": [
                        {
                            "name": "width",
                            "description": "Width (in pixels)",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "Height (in pixels)",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "data",
                    "description": "Objects extra custom data. This is optional.",
                    "type": "Object"
                },
                {
                    "name": "refresh",
                    "description": "Should we refresh the quadtree setting, after removal. Can take some\nresources to execute. So we want this to be optional.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Quadtree instance"
            },
            "class": "utils.Quadtree"
        },
        {
            "file": "src\\components\\map\\core\\utils\\Quadtree.js",
            "line": 70,
            "itemtype": "method",
            "name": "retrieve",
            "params": [
                {
                    "name": "coords",
                    "description": "Coordinates on the global / canvas element.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "size",
                    "description": "You can use bounds for the object \"hit\" detection",
                    "type": "Object",
                    "props": [
                        {
                            "name": "width",
                            "description": "Width (in pixels)",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "Height (in pixels)",
                            "type": "Integer"
                        }
                    ]
                }
            ],
            "class": "utils.Quadtree"
        },
        {
            "file": "src\\components\\map\\core\\utils\\Quadtree.js",
            "line": 94,
            "description": "Move an object on the quadtree",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "coords",
                    "description": "Coordinates on the global / canvas element.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "size",
                    "description": "You can use bounds for the object \"hit\" detection",
                    "type": "Object",
                    "props": [
                        {
                            "name": "width",
                            "description": "Width (in pixels)",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "Height (in pixels)",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "data",
                    "description": "Objects extra custom data. This is optional.",
                    "type": "Object"
                },
                {
                    "name": "to",
                    "description": "Should we refresh the quadtree setting, after removal. Can take some\nresources to execute. So we want this to be optional.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "True of false",
                "type": "Boolean"
            },
            "class": "utils.Quadtree"
        },
        {
            "file": "src\\components\\map\\core\\utils\\Quadtree.js",
            "line": 124,
            "description": "refresh the whole quadtree setting. Can spend some resources.",
            "itemtype": "method",
            "name": "refreshAll",
            "class": "utils.Quadtree"
        },
        {
            "file": "src\\components\\map\\core\\utils\\Quadtree.js",
            "line": 132,
            "description": "Find an object by hitDetection from the quadtree setting.",
            "itemtype": "method",
            "name": "findObject",
            "params": [
                {
                    "name": "coords",
                    "description": "Coordinates on the global / canvas element.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "size",
                    "description": "You can use bounds for the object \"hit\" detection",
                    "type": "Object",
                    "props": [
                        {
                            "name": "width",
                            "description": "Width (in pixels)",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "Height (in pixels)",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "data",
                    "description": "Objects extra custom data. This is optional.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Found object",
                "type": "Object"
            },
            "class": "utils.Quadtree"
        },
        {
            "file": "src\\components\\map\\core\\utils\\Quadtree.js",
            "line": 157,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "_creteQuadtreeObject",
            "params": [
                {
                    "name": "coords",
                    "description": "Coordinates on the global / canvas element.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "size",
                    "description": "You can use bounds for the object if you wish, instead of point / coordinates",
                    "type": "Object",
                    "props": [
                        {
                            "name": "width",
                            "description": "Width (in pixels)",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "Height (in pixels)",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "data",
                    "description": "Extra data stored for the quadtree object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Added quadtree object",
                "type": "Object"
            },
            "class": "utils.Quadtree"
        },
        {
            "file": "src\\components\\map\\core\\utils\\dataManipulation.js",
            "line": 29,
            "description": "Changes the data from e.g. getting objects from the map based on coordinate. The data is like this normally:\n{\n  units: [{\n    {... the objects datas ...}\n  }]\n}\nWe change it to this:\n[\n  [{\n    {... the objects datas ...}\n  }]\n]",
            "itemtype": "method",
            "name": "mapObjectsToArray",
            "params": [
                {
                    "name": "objects",
                    "description": "Object that holds objects",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the transformed array",
                "type": "Array"
            },
            "class": "utils.dataManipulation"
        },
        {
            "file": "src\\components\\map\\core\\utils\\dataManipulation.js",
            "line": 52,
            "itemtype": "method",
            "name": "flattenArrayBy1Level",
            "params": [
                {
                    "name": "objects",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "utils.dataManipulation"
        },
        {
            "file": "src\\components\\map\\core\\utils\\effects.js",
            "line": 29,
            "itemtype": "method",
            "name": "dropShadow",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "utils.effects"
        },
        {
            "file": "src\\components\\map\\core\\utils\\utils.js",
            "line": 24,
            "description": "Detects if the mouse click has been the right mouse button",
            "itemtype": "method",
            "name": "isRightClick",
            "params": [
                {
                    "name": "event",
                    "description": "The event where the click occured",
                    "type": "Event"
                }
            ],
            "class": "utils.mouse"
        },
        {
            "file": "src\\components\\map\\core\\utils\\utils.js",
            "line": 48,
            "itemtype": "method",
            "name": "getPointerCoords",
            "params": [
                {
                    "name": "e",
                    "description": "Event object",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "utils.mouse"
        },
        {
            "file": "src\\components\\map\\core\\utils\\utils.js",
            "line": 59,
            "itemtype": "method",
            "name": "getHAMMERPointerCoords",
            "params": [
                {
                    "name": "e",
                    "description": "Event object",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "utils.mouse"
        },
        {
            "file": "src\\components\\map\\core\\utils\\utils.js",
            "line": 67,
            "itemtype": "method",
            "name": "eventMouseCoords",
            "params": [
                {
                    "name": "e",
                    "description": "Event object",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "utils.mouse"
        },
        {
            "file": "src\\components\\map\\core\\utils\\utils.js",
            "line": 104,
            "itemtype": "method",
            "name": "toggleFullScreen",
            "class": "utils.resize"
        },
        {
            "file": "src\\components\\map\\core\\utils\\utils.js",
            "line": 150,
            "description": "Sets canvas size to maximum width and height on the browser, not using fullscreen",
            "itemtype": "method",
            "name": "setToFullSize",
            "params": [
                {
                    "name": "context",
                    "description": "DOMElement Canvas context",
                    "type": "HTMLElement"
                }
            ],
            "class": "utils.resize"
        },
        {
            "file": "src\\components\\map\\core\\utils\\utils.js",
            "line": 164,
            "description": "Get browser windows size",
            "itemtype": "method",
            "name": "getWindowSize",
            "params": [
                {
                    "name": "context",
                    "description": "DOMElement Canvas context",
                    "type": "HTMLElement"
                }
            ],
            "class": "utils.resize"
        },
        {
            "file": "src\\components\\map\\core\\utils\\utils.js",
            "line": 188,
            "itemtype": "method",
            "name": "getPixelRatio",
            "requires": [
                "Canvas element in the DOM. This needs to be found"
            ],
            "params": [
                {
                    "name": "canvasElement",
                    "description": "HTML canvas element",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "utils.environment"
        },
        {
            "file": "src\\components\\map\\core\\utils\\utils.js",
            "line": 215,
            "itemtype": "method",
            "name": "epsilonEquality",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "utils.general"
        },
        {
            "file": "src\\components\\map\\core\\zoom\\mapZoom.js",
            "line": 31,
            "description": "Maximum and minimum amount, the player can zoom the map",
            "itemtype": "attribute",
            "name": "zoomLimit",
            "type": "{{ farther: Number, closer: Number }}",
            "class": "mapZoom"
        },
        {
            "file": "src\\components\\map\\core\\zoom\\mapZoom.js",
            "line": 41,
            "description": "How much one step of zooming affects",
            "itemtype": "attribute",
            "name": "zoomModifier",
            "type": "{Number}",
            "class": "mapZoom"
        },
        {
            "file": "src\\components\\map\\core\\zoom\\mapZoom.js",
            "line": 60,
            "description": "Required init functions for the plugin",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "mapObj",
                    "description": "instantiated Map class object",
                    "type": "Map"
                }
            ],
            "todo": [
                "think through should setZoomLimits and setZoomModifier be in map.prototype?\nBut zoomLimit and modifier need to be setable in creation",
                "init or later with setters"
            ],
            "class": "mapZoom"
        },
        {
            "file": "src\\components\\map\\core\\zoom\\mapZoom.js",
            "line": 83,
            "description": "How much one mouse wheel step zooms",
            "itemtype": "method",
            "name": "setZoomModifier",
            "params": [
                {
                    "name": "amount",
                    "description": "How much one mouse wheel step zooms. Needs to be in between 0 - 0.5",
                    "type": "Number"
                }
            ],
            "class": "mapZoom"
        },
        {
            "file": "src\\components\\map\\core\\zoom\\mapZoom.js",
            "line": 97,
            "description": "How much can be zoomed in maximum and minimum",
            "itemtype": "method",
            "name": "setZoomLimits",
            "params": [
                {
                    "name": "farther",
                    "description": "(>1) How much one mouse wheel step zooms out",
                    "type": "Number"
                },
                {
                    "name": "closer",
                    "description": "(0 - 1) How much one mouse wheel step zooms in",
                    "type": "Number"
                }
            ],
            "class": "mapZoom"
        },
        {
            "file": "src\\components\\map\\core\\zoom\\mapZoom.js",
            "line": 110,
            "description": "Zoom in to the map",
            "itemtype": "method",
            "name": "zoomIn",
            "params": [
                {
                    "name": "amount",
                    "description": "how much map is zoomed in",
                    "type": "Number"
                }
            ],
            "class": "mapZoom"
        },
        {
            "file": "src\\components\\map\\core\\zoom\\mapZoom.js",
            "line": 124,
            "description": "Zoom out of the map",
            "itemtype": "method",
            "name": "zoomOut",
            "params": [
                {
                    "name": "amount",
                    "description": "how much map is zoomed out",
                    "type": "Number"
                }
            ],
            "class": "mapZoom"
        },
        {
            "file": "src\\components\\map\\core\\zoom\\mapZoom.js",
            "line": 143,
            "description": "This starts the correct eventListener for the current environment. Mousewheel and pinch differ quite dramatically\nso we keep them as separate functions.",
            "itemtype": "method",
            "name": "unifiedEventCB",
            "params": [
                {
                    "name": "e",
                    "description": "Event object",
                    "type": "Event"
                },
                {
                    "name": "delta",
                    "description": "Hamster.js provided delta",
                    "type": "Integer"
                },
                {
                    "name": "deltaX",
                    "description": "Hamster.js provided delta",
                    "type": "Integer"
                },
                {
                    "name": "deltaY",
                    "description": "Hamster.js provided delta",
                    "type": "Integer"
                }
            ],
            "class": "mapZoom"
        },
        {
            "file": "src\\components\\map\\core\\zoom\\mapZoom.js",
            "line": 164,
            "description": "Setup desktop zoomEvent by currying. Internally: Sets up correct scale + moves map accordingly to zoom to the\ncurrent center coordinates",
            "itemtype": "method",
            "name": "handleZoomEventDesktop",
            "params": [
                {
                    "name": "map",
                    "description": "Map instance",
                    "type": "Map"
                }
            ],
            "class": "mapZoom"
        },
        {
            "file": "src\\components\\map\\core\\zoom\\mapZoom.js",
            "line": 189,
            "description": "handleZoomEventMobile",
            "itemtype": "method",
            "name": "handleZoomEventMobile",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "mapZoom"
        },
        {
            "file": "src\\components\\map\\core\\zoom\\mapZoom.js",
            "line": 252,
            "description": "_isOverZoomLimit",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "_isOverZoomLimit",
            "class": "mapZoom"
        },
        {
            "file": "src\\components\\map\\core\\zoom\\mapZoom.js",
            "line": 266,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "_calculateCenterMoveCoordinates",
            "class": "mapZoom"
        },
        {
            "file": "src\\components\\map\\core\\zoom\\mapZoom.js",
            "line": 284,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "_zoom",
            "class": "mapZoom"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 111,
            "description": "canvas element that was generated and is being used by this new generated Map instance.",
            "itemtype": "attribute",
            "name": "canvas",
            "type": "{HTMLElement}",
            "required": 1,
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 119,
            "description": "list of plugins that the map uses and are initialized",
            "see": [
                "Map.activatePlugins"
            ],
            "itemtype": "attribute",
            "name": "plugins",
            "type": "{Set}",
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 127,
            "description": "Subcontainers size that we want to generate, when layers use subcontainers",
            "itemtype": "attribute",
            "name": "subcontainersConfig",
            "type": "{{width: Integer, height: Int}}",
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 134,
            "description": "Callback function that gets the current FPS on the map and shows it in DOM",
            "itemtype": "attribute",
            "name": "trackFPSCB",
            "type": "{Function}",
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 141,
            "description": "ObjectManager instance. Responsible for retrieving the objects from the map, on desired occasions. Like when the player clicks the map to select some object. This uses subcontainers when present.",
            "itemtype": "attribute",
            "name": "objectManager",
            "type": "{ObjectManager}",
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 148,
            "description": "Is cache activated for this map at all. This is set for individual layers with a property, but without activating the cache for the whole map, the layers cache property is ignored.",
            "itemtype": "attribute",
            "name": "objectManager",
            "type": "{ObjectManager}",
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 155,
            "description": "Layer types. Can be extended, but the already defined types are supposed to be constants and not to be changed.",
            "itemtype": "attribute",
            "name": "layerTypes",
            "type": "{Object}",
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 172,
            "description": "This initializes the map and makes everything appear on the map and actually work. Also initializes the given plugins since normally the plugins have to be activated before the map is shown.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "plugins",
                    "description": "Plugins to be activated for the map. Normally you should give the plugins here\ninstead of separately passing them to activatePlugins method. You can provide the module strings or module objects.",
                    "type": "String[]|Object[]"
                },
                {
                    "name": "coord",
                    "description": "Starting coordinates for the map.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate.",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate.",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "tickCB",
                    "description": "callback function for tick. Tick callback is initiated in every frame. So map draws happen during ticks.",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "Extra options.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "fullsize",
                            "description": "Do we set fullsize canvas or not at the beginning. Default: true",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns an array of Promises. If this is empty / zero. Then there is nothing to wait for, if it contains promises, you have to wait for them to finish for the plugins to work and map be ready.",
                "type": "Array"
            },
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 211,
            "description": "Returns a promise that resolves after the map is fully initialized",
            "itemtype": "method",
            "name": "whenReady",
            "return": {
                "description": "Promise that holds all the individual plugin loading promises",
                "type": "Promise"
            },
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 220,
            "description": "The correct way to update / redraw the map. Check happens at every tick and thus in every frame.",
            "itemtype": "method",
            "name": "drawOnNextTick",
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 228,
            "description": "Add an UI object to the wanted layer.",
            "itemtype": "method",
            "name": "addUIObject",
            "params": [
                {
                    "name": "layer",
                    "description": "Type of the layer. layerTypes.STATIC of layerTypes.MOVABLE.",
                    "type": "Integer"
                },
                {
                    "name": "object",
                    "description": "The object to be attached as UI object.",
                    "type": "Object"
                }
            ],
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 245,
            "description": "Remove an UI object to the wanted layer.",
            "itemtype": "method",
            "name": "removeUIObject",
            "params": [
                {
                    "name": "layer",
                    "description": "Type of the layer. layerTypes.STATIC of layerTypes.MOVABLE.",
                    "type": "Integer"
                },
                {
                    "name": "object",
                    "description": "The object to be attached as UI object.",
                    "type": "Object"
                }
            ],
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 262,
            "description": "Adds an UI object to the map. This method adds it to the given layer and removes it with removeUIObject-method.",
            "itemtype": "method",
            "name": "addUIObjects",
            "params": [
                {
                    "name": "layerType",
                    "description": "map.layerTypes holds the constants used in this.",
                    "type": "Integer"
                },
                {
                    "name": "objects",
                    "description": "Object that are added as UI objects",
                    "type": "Array"
                }
            ],
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 274,
            "description": "Create a special layer, that can holds e.g. UI effects in it.",
            "itemtype": "method",
            "name": "createSpecialLayer",
            "params": [
                {
                    "name": "name",
                    "description": "name of the layer",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Optional options.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "coord",
                            "description": "Coordinates of the layer",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "x",
                                    "description": "X coordinate",
                                    "type": "Integer"
                                },
                                {
                                    "name": "y",
                                    "description": "Y coordinate",
                                    "type": "Integer"
                                }
                            ]
                        },
                        {
                            "name": "toLayer",
                            "description": "To which layer will this layer be added to as UILayer",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The created UI layer",
                "type": "MapLayer"
            },
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 295,
            "description": "All parameters are passed to ParentLayerConstructor (normally constructor of MapLayer).",
            "itemtype": "method",
            "name": "addLayer",
            "uses": [
                "MapLayer"
            ],
            "return": {
                "description": "created MapLayer instance",
                "type": "MapLayer"
            },
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 314,
            "description": "Just a convenience function (for usability and readability), for checking if the map uses subcontainers.",
            "itemtype": "method",
            "name": "usesSubcontainers",
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 322,
            "description": "Returns current subcontainers configurations (like subcontainers size).",
            "itemtype": "method",
            "name": "getSubcontainerConfigs",
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 330,
            "description": "Get the size of the area that is shown to the player. More or less the area of the browser window.",
            "itemtype": "method",
            "name": "getViewportArea",
            "params": [
                {
                    "name": "isLocal",
                    "description": "Do we want to use Map coordinates or global / canvas coordinates. Default = false",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "}        x- and y-coordinates and the width and height of the viewport",
                "type": "X: Integer, y: Integer, width: Integer, height: Integer"
            },
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 347,
            "description": "Remove a primary layer from the map",
            "itemtype": "method",
            "name": "removeLayer",
            "params": [
                {
                    "name": "layer",
                    "description": "The layer object to be removed",
                    "type": "MapLayer|PIXI.Container|PIXI.ParticleContainer"
                }
            ],
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 358,
            "description": "Moves the map the amount of given x and y pixels. Note that this is not the destination coordinate, but the amount of movement that the map should move. Internally it moves the movableLayer, taking into account necessary properties (like scale). Draws map after movement.",
            "itemtype": "method",
            "name": "moveMap",
            "params": [
                {
                    "name": "coord",
                    "description": "The amount of x and y coordinates we want the map to move. I.e. { x: 5, y: 0 }. With this we want the map to move horizontally 5 pixels and vertically stay at the same position.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "informCoordinates",
                    "description": "THIS IS EXPERIMENTAL, TO FIX THE INCORRECT EVENT COORDINATES THIS SEND TO mapEvents, WHEN SCALING",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "Integer"
                        }
                    ]
                }
            ],
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 378,
            "description": "Is cache on",
            "itemtype": "method",
            "name": "isCacheActivated",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 387,
            "description": "Cache the map. This provides performance boost when used correctly. CacheMap iterates through all the layers on the map and caches the ones that return true from isCached-method. NOT WORKING YET. CACHING IMPLEMENTED SOON.",
            "itemtype": "method",
            "name": "cacheMap",
            "params": [
                {
                    "name": "filters",
                    "description": "filters from MapDataManipulator.js",
                    "type": "Object"
                }
            ],
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 396,
            "description": "unCache the map. NOT WORKING ATM. IMPLEMENTED SOON!",
            "itemtype": "method",
            "name": "unCacheMap",
            "return": {
                "description": "this map instance",
                "type": "Map"
            },
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 405,
            "description": "Activate all plugins for the map. Iterates through the given plugins we wish to activate and does the actual work in activatePlugin-method.",
            "itemtype": "method",
            "name": "pluginsArray",
            "params": [
                {
                    "name": "pluginsArray",
                    "description": "Array that consists the plugin modules to be activated",
                    "type": "Object[]"
                }
            ],
            "return": {
                "description": "Promise. If string are provided resolved those with System.import, otherwise resolves immediately.",
                "type": "Promise"
            },
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 426,
            "description": "Activate plugin for the map. Plugins need .pluginName property and .init-method. Plugins init-method activates the plugins and we call them in Map. Plugins init-metho receivse this (Map instance) as their only parameter.",
            "itemtype": "method",
            "name": "activatePlugin",
            "params": [
                {
                    "name": "plugin",
                    "description": "Plugin module",
                    "type": "Object"
                }
            ],
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 445,
            "description": "Setting new prototype methods for the Map instance",
            "itemtype": "method",
            "name": "setPrototype",
            "params": [
                {
                    "name": "property",
                    "description": "The property you want to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Value for the property",
                    "type": "*"
                }
            ],
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 457,
            "description": "Gets object under specific map coordinates. Uses the ObjectManagers retrieve method. Using subcontainers if they exist, other methods if not. If you provide type parameter, the method returns only object types that match it.",
            "itemtype": "method",
            "name": "getObjectsUnderArea",
            "params": [
                {
                    "name": "globalCoords",
                    "description": "Event coordinates on the staticLayer / canvas.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "Optional options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "filter",
                            "description": "The filter to apply to subcontainers",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Array of object found on the map.",
                "type": "Array"
            },
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 498,
            "description": "This returns the normal parent layers that we mostly use for manipulation everything. MovableLayer and staticLayer are built-in layers designed to provide the basic functionalities like zooming and moving the map. These layers provide everything that extends the map more.",
            "itemtype": "method",
            "name": "getPrimaryLayers",
            "return": {
                "description": "Basically anything in the map that is used as a layer (not really counting subcontainers).",
                "type": "Object"
            },
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 507,
            "description": "Get current map coordinates. Basically the same as movable layers position.",
            "itemtype": "method",
            "name": "getMapCoordinates",
            "return": {
                "description": "}          current coordinates for the moved map",
                "type": "X: Integer, y: Integer"
            },
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 519,
            "description": "This returns the layer that is responsible for map zoom",
            "itemtype": "method",
            "name": "getZoomLayer",
            "return": {
                "description": "",
                "type": "MapLayer|PIXI.Container|PIXI.ParticleContainer"
            },
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 528,
            "description": "Set map zoom. 1 = no zoom. <1 zoom out, >1 zoom in.",
            "itemtype": "method",
            "name": "setZoom",
            "params": [
                {
                    "name": "scale",
                    "description": "The amount of zoom you want to set",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The amount of zoom applied",
                "type": "Number"
            },
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 538,
            "description": "Get map zoom. 1 = no zoom. <1 zoom out, >1 zoom in.",
            "itemtype": "method",
            "name": "getZoom",
            "return": {
                "description": "",
                "type": "MapLayer|PIXI.Container|PIXI.ParticleContainer"
            },
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 547,
            "description": "Returns movable layer. This layer is the one that moves when the player moves the map. So this is used for things that are relative to the current map position the player is seeing. This can be used e.g. when you want to display some objects on the map or UI elements, like effects that happen on certain point on the map.",
            "itemtype": "method",
            "name": "getMovableLayer",
            "return": {
                "description": "",
                "type": "MapLayer|PIXI.Container|PIXI.ParticleContainer"
            },
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 556,
            "description": "Returns the PIXI renderer. Some situations might need this. For more advanced or PIXI specific cases.",
            "itemtype": "method",
            "name": "getRenderer",
            "return": {
                "description": "",
                "type": "PIXI.Renderer"
            },
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 565,
            "description": "Return static layer. The static layer is the topmost of all layers. It handles zooming and other non-movable operations.",
            "itemtype": "method",
            "name": "getStaticLayer",
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 576,
            "description": "This is abstract method and needs to be implemented with a plugin. Core module has an implementation for this and if you don't implement your own, I suggest you use it.",
            "itemtype": "method",
            "name": "zoomIn",
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 582,
            "description": "This is abstract method and needs to be implemented with a plugin. Core module has an implementation for this and if you don't implement your own, I suggest you use it.",
            "itemtype": "method",
            "name": "zoomOut",
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 588,
            "description": "Resize the canvas to fill the whole browser content area. Defined by the baseEventlisteners-module (core modules plugin)",
            "itemtype": "method",
            "name": "toggleFullsize",
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 594,
            "description": "Toggles fullscreen mode. Defined by the baseEventlisteners-module (core modules plugin)",
            "itemtype": "method",
            "name": "toggleFullScreen",
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 604,
            "description": "Retrieves the objects from ObjectManager, with the given parameters. Mostly helper functionality for getObjectsUnderArea",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_retrieveObjects",
            "params": [
                {
                    "name": "allCoords",
                    "description": "REQUIRED",
                    "type": "Object",
                    "props": [
                        {
                            "name": "globalCoords",
                            "description": "REQUIRED",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "x",
                                    "description": "REQUIRED",
                                    "type": "Integer"
                                },
                                {
                                    "name": "y",
                                    "description": "REQUIRED",
                                    "type": "Integer"
                                },
                                {
                                    "name": "width",
                                    "description": "REQUIRED",
                                    "type": "Integer"
                                },
                                {
                                    "name": "height",
                                    "description": "REQUIRED",
                                    "type": "Integer"
                                }
                            ]
                        },
                        {
                            "name": "localCoords",
                            "description": "REQUIRED",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "x",
                                    "description": "REQUIRED",
                                    "type": "Integer"
                                },
                                {
                                    "name": "y",
                                    "description": "REQUIRED",
                                    "type": "Integer"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "Optional options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "type",
                            "description": "The type of objects we want",
                            "type": "String"
                        },
                        {
                            "name": "subcontainers",
                            "description": "Array of the subcontainers we will search",
                            "type": "Array"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Found objects",
                "type": "Array"
            },
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 633,
            "description": "This returns layers by filtering them based on certain attribute. Can be used with more higher order filtering",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getLayersWithAttributes",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "the current map instance"
            },
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 647,
            "description": "Get subcontainers under certain point or rectangle",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getSubcontainersUnderPoint",
            "params": [
                {
                    "name": "globalCoords",
                    "description": "",
                    "type": "[type]"
                },
                {
                    "name": "options",
                    "description": "Optional options.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "All subcontainers that matched the critea",
                "type": "Array"
            },
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 669,
            "description": "Activate the browsers fullScreen mode and expand the canvas to fullsize",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setFullScreen",
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 680,
            "description": "Resizes the canvas to the current most wide and high element status. Basically canvas size === window size.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_resizeCanvas",
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 694,
            "description": "This handles the default drawing of the map, so that map always updates when drawOnNextTick === true. This tick\ncallback is always set and should not be removed or overruled",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_defaultTick",
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\Map.js",
            "line": 743,
            "description": "cacheLayers",
            "itemtype": "method",
            "name": "cacheLayers",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "cacheOrNot",
                    "description": "Do you want to cache or uncache?",
                    "type": "Boolean"
                },
                {
                    "name": "hasSubcontainers",
                    "description": "Does the map have subcontainers activated?",
                    "type": "Boolean"
                }
            ],
            "class": "Map"
        },
        {
            "file": "src\\components\\map\\core\\MapDataManipulator.js",
            "line": 28,
            "description": "This is the actual method that runs through the rules and arranges the data",
            "itemtype": "method",
            "name": "_runRules",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "MapDataManipulator"
        },
        {
            "file": "src\\components\\map\\core\\MapDataManipulator.js",
            "line": 53,
            "description": "This is the actual method that runs through the rules and arranges the data",
            "todo": [
                "Refactor"
            ],
            "itemtype": "method",
            "name": "_getContainer",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "MapDataManipulator"
        },
        {
            "file": "src\\components\\map\\core\\MapDataManipulator.js",
            "line": 69,
            "description": "This is the actual method that runs through the rules and arranges the data",
            "todo": [
                "Refactor"
            ],
            "itemtype": "method",
            "name": "_getContainer",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "MapDataManipulator"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 36,
            "description": "Layers name, used for identifying the layer. Useful in debugging, but can be used for finding correct layers too",
            "itemtype": "attribute",
            "name": "name",
            "type": "{String}",
            "class": "MapLayer"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 43,
            "description": "Is this layer special (e.g. UILayer not included in normal operations)",
            "itemtype": "attribute",
            "name": "specialLayer",
            "type": "{Boolean}",
            "class": "MapLayer"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 50,
            "description": "Can you select objects from this layer. For example with Map.getObjectsUnderArea",
            "itemtype": "attribute",
            "name": "selectable",
            "type": "{Boolean}",
            "class": "MapLayer"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 58,
            "description": "Does this layer use subcontainers.",
            "itemtype": "method",
            "name": "hasSubcontainers",
            "return": {
                "description": "true = uses subcontainers.",
                "type": "Boolean"
            },
            "class": "MapLayer"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 67,
            "description": "Is this layer cached at the moment or not.",
            "itemtype": "method",
            "name": "isCached",
            "return": {
                "description": "true = is cached",
                "type": "Boolean"
            },
            "class": "MapLayer"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 76,
            "description": "Move layer based on given amounts",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "coord",
                    "description": "The amount of x and y coordinates we want the layer to move. I.e. { x: 5, y: 0 }. This would move the map 5 pixels horizontally and 0 pixels vertically",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "Integer"
                        }
                    ]
                }
            ],
            "class": "MapLayer"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 89,
            "description": "set layer zoom",
            "itemtype": "method",
            "name": "setZoom",
            "params": [
                {
                    "name": "amount",
                    "description": "The amount that you want the layer to zoom.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The same amount that was given, except after transform to 2 decimals and type cast to Number",
                "type": "Number"
            },
            "class": "MapLayer"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 101,
            "description": "get layer zoom",
            "itemtype": "method",
            "name": "getZoom",
            "return": {
                "description": "current amount of zoom",
                "type": "Boolean"
            },
            "class": "MapLayer"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 110,
            "description": "get UIObjects on this layer, if there are any, or defaulty empty array if no UIObjects are active",
            "itemtype": "method",
            "name": "getUIObjects",
            "return": {
                "description": "current UIObjects",
                "type": "Array"
            },
            "class": "MapLayer"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 119,
            "description": "Remove all the UIObjects from this layer",
            "itemtype": "method",
            "name": "emptyUIObjects",
            "return": {
                "description": "empty UIObjects array",
                "type": "Array"
            },
            "class": "MapLayer"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 133,
            "description": "Get primary layers, that this layer holds as children. So basically all children that are not special layers (such as UI layers etc.)",
            "itemtype": "method",
            "name": "getPrimaryLayers",
            "return": {
                "description": "Primary children layers under this layer",
                "type": "Array"
            },
            "class": "MapLayer"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 144,
            "description": "Get all objects that are this layers children or subcontainers children. Does not return layers, but the objects.",
            "itemtype": "method",
            "name": "getObjects",
            "return": {
                "description": "All the objects (not layers) found under this layer",
                "type": "Array"
            },
            "class": "MapLayer"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 161,
            "todo": [
                "IMPLEMENT CACHE PROPERLY! TAKE SUBCONTAINERS INTO ACCOUNT!\n\nSets layer cache on or off."
            ],
            "itemtype": "method",
            "name": "setCache",
            "params": [
                {
                    "name": "status",
                    "description": "true = activate cache, false = disable cache",
                    "type": "Boolean"
                }
            ],
            "class": "MapLayer"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 176,
            "description": "Create and add special layer, that holds UI effects in it.",
            "itemtype": "method",
            "name": "createUILayer",
            "params": [
                {
                    "name": "name",
                    "description": "name of the layer",
                    "type": "String"
                },
                {
                    "name": "coord",
                    "description": "Coordinates of the layer",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "Integer"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The created UI layer",
                "type": "MapLayer"
            },
            "class": "MapLayer"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 196,
            "description": "Adds and object to this layers UILayer child.",
            "itemtype": "method",
            "name": "addUIObject",
            "params": [
                {
                    "name": "object",
                    "description": "The UI object to be added under this layer",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "All the UIObjects currently on this layer",
                "type": "Array"
            },
            "class": "MapLayer"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 218,
            "description": "Return the UILayer. If no UILayer is yet created, will return undefined",
            "itemtype": "method",
            "name": "getUILayer",
            "return": {
                "description": "",
                "type": "MapLayer | undefined"
            },
            "class": "MapLayer"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 256,
            "description": "We override the PIXIs own addchild functionality. Since we need to support subcontainers in addChild. We check subcontainers and then we call the original (PIXIs) addChild",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "displayObject",
                    "description": "PIXI.DisplayObject",
                    "type": "PIXI.DisplayObject"
                }
            ],
            "class": "MapLayerParent"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 273,
            "description": "Returns the configurations set for subcontainers.",
            "itemtype": "method",
            "name": "getSubcontainerConfigs",
            "class": "MapLayerParent"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 281,
            "description": "Returns subcontainers based on the given coordinates. Can be applied through a MapDataManipulator filter also.",
            "itemtype": "method",
            "name": "getSubcontainersByCoordinates",
            "params": [
                {
                    "name": "coordinates",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "Optional options.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "filter",
                            "description": "Filter for selecting only certain subcontainers",
                            "type": "MapDataManipulator"
                        }
                    ]
                }
            ],
            "class": "MapLayerParent"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 307,
            "itemtype": "method",
            "name": "getSubcontainers",
            "class": "MapLayerParent"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 333,
            "description": "Gets this subcontainers coordinates and size",
            "itemtype": "method",
            "name": "getSubcontainerArea",
            "params": [
                {
                    "name": "scale",
                    "description": "The size of scale the map currently has",
                    "type": "Number"
                },
                {
                    "name": "options.toGlobal",
                    "description": "Do we get the global coordinates or local",
                    "type": "Boolean"
                }
            ],
            "class": "MapSubcontainer"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 356,
            "description": "Set cache on or off for this layer",
            "itemtype": "method",
            "name": "setCache",
            "params": [
                {
                    "name": "status",
                    "description": "true = activate cache, false = disable cache",
                    "type": "Boolean"
                }
            ],
            "class": "MapSubcontainer"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 373,
            "description": "Helper function for setting subcontainers to parent containers",
            "itemtype": "method",
            "name": "setCorrectSubcontainer",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "displayObject",
                    "description": "",
                    "type": "PIXI.DisplayObject"
                },
                {
                    "name": "parentLayer",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "MapSubcontainer"
        },
        {
            "file": "src\\components\\map\\core\\MapLayers.js",
            "line": 412,
            "description": "Get the closest subcontainers of the given area.",
            "itemtype": "method",
            "name": "getClosestSubcontainers",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "layer",
                    "description": "Instance of PIXI.Container - The layer being used",
                    "type": "Object"
                },
                {
                    "name": "xIndex",
                    "description": "x / horizontal index.",
                    "type": "Number"
                },
                {
                    "name": "yIndex",
                    "description": "y / vertical index.",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "Optional options.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "filter",
                            "description": "Filter for selecting only wanted subcontainers",
                            "type": "MapDataManipulator"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Array of found subcontainers.",
                "type": "Array"
            },
            "class": "MapSubcontainer"
        },
        {
            "file": "src\\components\\map\\core\\ObjectManager.js",
            "line": 24,
            "description": "Retrieve objects under certain coordinates or area, if size is given. Uses subcontainers when used, no other options yet.",
            "itemtype": "method",
            "name": "retrieve",
            "params": [
                {
                    "name": "allCoords",
                    "description": "The coordinates which we want to hitTest",
                    "type": "Object",
                    "props": [
                        {
                            "name": "globalCoords",
                            "description": "Global coordinates on static layer / canvas",
                            "type": "X:Integer, y:Integer",
                            "props": [
                                {
                                    "name": "x",
                                    "description": "",
                                    "type": "X:Integer, y:Integer"
                                },
                                {
                                    "name": "y",
                                    "description": "",
                                    "type": "X:Integer, y:Integer"
                                }
                            ]
                        },
                        {
                            "name": "localCoords",
                            "description": "Local coordiantes on movable layer",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "x",
                                    "description": "",
                                    "type": "X:Integer, y:Integer"
                                },
                                {
                                    "name": "y",
                                    "description": "",
                                    "type": "X:Integer, y:Integer"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "type",
                    "description": "type of the object / layer that we want to retrieve",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "optional options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "subcontainers",
                            "description": "The subcontainers we match against",
                            "type": "Array"
                        },
                        {
                            "name": "size",
                            "description": "Size of the rectangle area to match against, if we want to match rectangle instead of one point",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "width",
                                    "description": "",
                                    "type": "Integer"
                                },
                                {
                                    "name": "height",
                                    "description": "",
                                    "type": "Integer"
                                }
                            ]
                        }
                    ]
                }
            ],
            "return": {
                "description": "matched objects",
                "type": "Array"
            },
            "class": "ObjectManager"
        },
        {
            "file": "src\\components\\map\\core\\Objects.js",
            "line": 33,
            "description": "Name of the object. Used mostly for debugging",
            "itemtype": "attribute",
            "name": "",
            "type": "{String}",
            "class": "Object_sprite"
        },
        {
            "file": "src\\components\\map\\core\\Objects.js",
            "line": 40,
            "description": "Type of the object. Can be used for filtering, ordering or finding correct objects.",
            "itemtype": "attribute",
            "name": "",
            "type": "{String}",
            "class": "Object_sprite"
        },
        {
            "file": "src\\components\\map\\core\\Objects.js",
            "line": 47,
            "description": "Is the object highligtable.",
            "itemtype": "attribute",
            "name": "",
            "type": "{Boolean}",
            "class": "Object_sprite"
        },
        {
            "file": "src\\components\\map\\core\\Objects.js",
            "line": 54,
            "description": "Objects custom data. Holds unit statistics and most data. Like unit movement speed etc.",
            "itemtype": "attribute",
            "name": "",
            "type": "{Object}",
            "class": "Object_sprite"
        },
        {
            "file": "src\\components\\map\\core\\Objects.js",
            "line": 61,
            "description": "Current frame (from spritesheet) we are showing.",
            "itemtype": "attribute",
            "name": "",
            "type": "{Number}",
            "class": "Object_sprite"
        },
        {
            "file": "src\\components\\map\\core\\Objects.js",
            "line": 68,
            "description": "Object area width in pixels.",
            "itemtype": "attribute",
            "name": "",
            "type": "{Number}",
            "class": "Object_sprite"
        },
        {
            "file": "src\\components\\map\\core\\Objects.js",
            "line": 75,
            "description": "Object area height in pixels.",
            "itemtype": "attribute",
            "name": "",
            "type": "{Number}",
            "class": "Object_sprite"
        },
        {
            "file": "src\\components\\map\\core\\Objects.js",
            "line": 83,
            "description": "Drawing the object",
            "itemtype": "method",
            "name": "innerDraw",
            "params": [
                {
                    "name": "x",
                    "description": "coordinate x",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "coordinate y",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "this object instance"
            },
            "class": "Object_sprite"
        },
        {
            "file": "src\\components\\map\\core\\Objects.js",
            "line": 98,
            "description": "Draws new frame to animate or such",
            "itemtype": "method",
            "name": "drawNewFrame",
            "params": [
                {
                    "name": "x",
                    "description": "coordinate x",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "coordinate y",
                    "type": "Number"
                },
                {
                    "name": "newFrame",
                    "description": "New frame number to animate to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "this object instance"
            },
            "class": "Object_sprite"
        },
        {
            "file": "src\\components\\map\\core\\Objects.js",
            "line": 112,
            "description": "Get the area that is reserved for the graphical presenation of this object as a rectangle.",
            "itemtype": "method",
            "name": "getGraphicalArea",
            "params": [
                {
                    "name": "options",
                    "description": "toGlobal: Boolean. Should the method return global coordinates or local (movableLayer)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "{ x: Number, y: Number, width: Number, height: Number}",
                "type": "AreaSize"
            },
            "class": "Object_sprite"
        },
        {
            "file": "src\\components\\map\\core\\Objects.js",
            "line": 131,
            "description": "Coordinate conversion: localToLocal",
            "itemtype": "method",
            "name": "localToLocal",
            "params": [
                {
                    "name": "x",
                    "description": "X coordinate",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y coordinate",
                    "type": "Number"
                },
                {
                    "name": "target",
                    "description": "PIXI.DisplayObject. The DisplayObject where we should target the coordinates for",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Coordinates"
            },
            "class": "Object_sprite"
        },
        {
            "file": "src\\components\\map\\core\\Objects.js",
            "line": 147,
            "description": "Clone object",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "renderer",
                    "description": "PIXI renderer",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "position: Boolean, anchor: Boolean",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "cloned object",
                "type": "Object"
            },
            "class": "Object_sprite"
        },
        {
            "file": "src\\components\\map\\core\\Objects.js",
            "line": 212,
            "description": "actions bound to this object. @todo THIS HAS NOT BEEN IMPLEMENTED YET!",
            "itemtype": "attribute",
            "name": "actions",
            "type": "{Object}",
            "class": "ObjectSpriteUnit"
        },
        {
            "file": "src\\components\\map\\core\\Objects.js",
            "line": 223,
            "description": "Execute action on units (move, attack etc.). @todo THIS HAS NOT BEEN IMPLEMENTED YET!",
            "itemtype": "method",
            "name": "doAction",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "ObjectSpriteUnit"
        },
        {
            "file": "src\\components\\map\\core\\Objects.js",
            "line": 234,
            "description": "Add certain action type. @todo THIS HAS NOT BEEN IMPLEMENTED YET!",
            "itemtype": "method",
            "name": "addActionType",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "ObjectSpriteUnit"
        },
        {
            "file": "src\\components\\map\\core\\Objects.js",
            "line": 243,
            "description": "Attach callback for the certain action type. @todo THIS HAS NOT BEEN IMPLEMENTED YET!",
            "itemtype": "method",
            "name": "addCallbackToAction",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ObjectSpriteUnit"
        },
        {
            "file": "src\\components\\map\\core\\Objects.js",
            "line": 253,
            "itemtype": "method",
            "name": "dropShadow",
            "class": "ObjectSpriteUnit"
        },
        {
            "file": "src\\components\\map\\core\\UI.js",
            "line": 43,
            "description": "Responsible for showing selection element, where the player select the wanted object out of array of objects.\nFor example if there are several objects in one tile on the map and the player needs to be able to select one\nspecific unit on the stack. This is always defined in the UI theme-module",
            "itemtype": "method",
            "name": "showSelections",
            "static": 1,
            "params": [
                {
                    "name": "objects",
                    "description": "Objects that have been selected.",
                    "type": "Array"
                },
                {
                    "name": "getDatas",
                    "description": "This is an object made of functions, that get wanted data from the object. For example if you have objects name in object.data.specialData.name, then you have an object getDatas.name(), which retrieves this.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "Retrieves object name",
                            "type": "Object"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "Extra options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "UI"
        },
        {
            "file": "src\\components\\map\\core\\UI.js",
            "line": 67,
            "description": "Resonsible for hignlighting the selected object. For example the unit that is being commanded. The hightlight\ncan mean e.g. bringing the unit on top on the map and showing selection circle around it.",
            "itemtype": "method",
            "name": "highlightSelectedObject",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "Object that has been selected.",
                    "type": "Object"
                },
                {
                    "name": "getDatas",
                    "description": "This is an object made of functions, that get wanted data from the object. For example if you have objects name in object.data.specialData.name, then you have an object getDatas.name(), which retrieves this.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "Retrieves object name",
                            "type": "Object"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "Extra options. Like dropping a shadow etc.",
                    "type": "Object"
                }
            ],
            "class": "UI"
        },
        {
            "file": "src\\components\\map\\core\\UI.js",
            "line": 81,
            "description": "Shows arrow or movement or what ever to indicate the selected unit is moving to the given location",
            "itemtype": "method",
            "name": "showUnitMovement",
            "static": 1,
            "class": "UI"
        },
        {
            "file": "src\\components\\map\\core\\UI.js",
            "line": 96,
            "description": "This is a general function which filters only highlightable object for use in UI operations",
            "static": 1,
            "itemtype": "method",
            "name": "filterObjectsForHighlighting",
            "params": [
                {
                    "name": "objects",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "UI"
        },
        {
            "file": "src\\components\\map\\core\\UI_themeBase.js",
            "line": 32,
            "description": "Get the stylesheet element. Where are the defined CSS is",
            "itemtype": "method",
            "name": "getStyleSheetElement",
            "return": {
                "description": "",
                "type": "HTMLElement"
            },
            "class": "UI_templateBase"
        },
        {
            "file": "src\\components\\map\\core\\UI_themeBase.js",
            "line": 41,
            "itemtype": "method",
            "name": "getCSSClasses",
            "class": "UI_templateBase"
        },
        {
            "file": "src\\components\\map\\core\\UI_themeBase.js",
            "line": 47,
            "itemtype": "method",
            "name": "addCSSRulesToScriptTag",
            "params": [
                {
                    "name": "sheet",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "rules",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "UI_templateBase"
        },
        {
            "file": "src\\components\\map\\core\\UI_themeBase.js",
            "line": 56,
            "itemtype": "method",
            "name": "addStyleElement",
            "class": "UI_templateBase"
        },
        {
            "file": "src\\components\\map\\core\\UI_themeBase.js",
            "line": 67,
            "itemtype": "method",
            "name": "showModal",
            "params": [
                {
                    "name": "modalElem",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "cssClasses",
                    "description": "",
                    "type": "Object"
                }
            ],
            "todo": [
                "make sure / check",
                "that modalElem.classList.add gets added only once"
            ],
            "class": "UI_templateBase"
        },
        {
            "file": "src\\components\\map\\core\\eventlisteners.js",
            "line": 46,
            "description": "Activates the eventListener.",
            "itemtype": "event",
            "name": "Event that consists of \"Map\" + the given event type, like such: \"MapDrag\"",
            "throws": {
                "description": "General error, if detector for this event type has not been set.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "type",
                    "description": "REQUIRED. The type of event. This type has been created with setDetector.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "REQUIRED. Callback to do it's eventlistener magic.",
                    "type": "Boolean"
                }
            ],
            "class": "eventListeners"
        },
        {
            "file": "src\\components\\map\\core\\eventlisteners.js",
            "line": 63,
            "description": "Deactivates the eventListener. Callback is optional. If is not provided will remove all this types eventListeners",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type",
                    "description": "REQUIRED. The type of event. This type has been created with setDetector.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback to do it's eventlistener magic.",
                    "type": "Boolean"
                }
            ],
            "class": "eventListeners"
        },
        {
            "file": "src\\components\\map\\core\\eventlisteners.js",
            "line": 74,
            "description": "Activates the eventListener. Callback is optional. If is not provided will check if the eventlistener type has any listeners active.",
            "itemtype": "method",
            "name": "isOn",
            "params": [
                {
                    "name": "type",
                    "description": "REQUIRED. The type of event. This type has been created with setDetector.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback to do it's eventlistener magic.",
                    "type": "Boolean"
                }
            ],
            "class": "eventListeners"
        },
        {
            "file": "src\\components\\map\\core\\eventlisteners.js",
            "line": 88,
            "description": "Sets the state of the event. State is very important e.g. for fluent dragging and selecting. When we start to drag, we avoid selecting units and vice versa, when we keep an event state tracking through this.",
            "itemtype": "method",
            "name": "setActivityState",
            "params": [
                {
                    "name": "type",
                    "description": "EventType",
                    "type": "String"
                },
                {
                    "name": "newState",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "class": "eventListeners"
        },
        {
            "file": "src\\components\\map\\core\\eventlisteners.js",
            "line": 98,
            "description": "get activity state of the event",
            "itemtype": "method",
            "name": "getActivityState",
            "params": [
                {
                    "name": "type",
                    "description": "EventType",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "eventListeners"
        },
        {
            "file": "src\\components\\map\\core\\eventlisteners.js",
            "line": 108,
            "description": "Set event detector. If there is already detector of this type, we overwrite it.",
            "itemtype": "method",
            "name": "setDetector",
            "params": [
                {
                    "name": "type",
                    "description": "Event type",
                    "type": "String"
                },
                {
                    "name": "cbOn",
                    "description": "Callback which sets activates the detector",
                    "type": "Function"
                },
                {
                    "name": "cbOff",
                    "description": "Callback which sets deactivates the detector",
                    "type": "Function"
                }
            ],
            "class": "eventListeners"
        },
        {
            "file": "src\\components\\map\\core\\eventlisteners.js",
            "line": 123,
            "description": "Clear event detector. We also remove all possible eventlisteners set on this event type.",
            "itemtype": "method",
            "name": "clearDetector",
            "params": [
                {
                    "name": "type",
                    "description": "Event type",
                    "type": "String"
                }
            ],
            "class": "eventListeners"
        },
        {
            "file": "src\\components\\map\\core\\eventlisteners.js",
            "line": 143,
            "description": "This creates a wrapper for callback. The idea is to send map events from this wrapper for all events.",
            "itemtype": "method",
            "name": "_createWrapper",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "Event type",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Event callback",
                    "type": "Function"
                }
            ],
            "class": "eventListeners"
        },
        {
            "file": "src\\components\\map\\extensions\\hexagons\\eventListeners\\select.js",
            "line": 41,
            "description": "the listener that received the event object",
            "itemtype": "method",
            "name": "tapListener",
            "params": [
                {
                    "name": "e",
                    "description": "Event object",
                    "type": "Event"
                }
            ],
            "class": "hexagonPlugin.setupHexagonClick"
        },
        {
            "file": "src\\components\\map\\extensions\\hexagons\\utils\\createHexagon.js",
            "line": 26,
            "description": "Credits belong to: https://github.com/alforno-productions/HexPixiJs/blob/master/lib/hexPixi.js\nCreates a hex shaped polygon that is used for the hex's hit area.",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "createHexagon",
            "params": [
                {
                    "name": "radius",
                    "description": "Radius of the hexagon",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "Options, such as: isFlatTop (Boolean), is the heaxgon flat-topped",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Hexagon shaped PIXI.Polygon object. That houses the hexagons corner points.",
                "type": "PIXI.Polygon"
            },
            "class": "hexagonPlugin.utils"
        },
        {
            "file": "src\\components\\map\\extensions\\hexagons\\utils\\createHexagon.js",
            "line": 44,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "createVisibleHexagon",
            "params": [
                {
                    "name": "radius",
                    "description": "Radius of the hexagon",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "Options, such as:\n                             color: The fill color of the hexagon\n                             isFlatTop (Boolean), is the heaxgon flat-topped",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Graphics object that is shaped as hexagon, based on given radius and options.",
                "type": "PIXI.Graphics"
            },
            "class": "hexagonPlugin.utils"
        },
        {
            "file": "src\\components\\map\\extensions\\hexagons\\utils\\createHexagon.js",
            "line": 68,
            "description": "Converts Array of x- and y-coordinates to new PIXI.Point coordinates",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "coordsToPixiPoints",
            "params": [
                {
                    "name": "radius",
                    "description": "Hexagons radius",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Array of PIXI.Point coordinates",
                "type": "Array"
            },
            "class": "hexagonPlugin.utils"
        },
        {
            "file": "src\\components\\map\\extensions\\hexagons\\utils\\hexagonMath.js",
            "line": 25,
            "description": "Calculates the hexagons:\ninnerDiameter\n- Vertical / Flat hexagons height\n- Horizontal / pointy hexagons width",
            "itemtype": "method",
            "name": "calcLongDiagonal",
            "static": 1,
            "params": [
                {
                    "name": "value",
                    "description": "- Usually the radius of the hexagon",
                    "type": "Float"
                },
                {
                    "name": "type",
                    "description": "- If you provide something else than radius, where the calculation is based from",
                    "type": "String"
                },
                {
                    "name": "precision",
                    "description": "- How many decimals to round",
                    "type": "Integer"
                }
            ],
            "class": "hexagonPlugin.utils"
        },
        {
            "file": "src\\components\\map\\extensions\\hexagons\\utils\\hexagonMath.js",
            "line": 48,
            "description": "outerDiameter\n- Vertical / Flat hexagons width\n- Horizontal / pointy hexagons height",
            "itemtype": "method",
            "name": "calcLongDiagonal",
            "static": 1,
            "params": [
                {
                    "name": "value",
                    "description": "Usually the radius of the hexagon",
                    "type": "Float"
                },
                {
                    "name": "type",
                    "description": "If you provide something else than radius, where the calculation is based from",
                    "type": "String"
                },
                {
                    "name": "precision",
                    "description": "How many decimals to round",
                    "type": "Integer"
                }
            ],
            "class": "hexagonPlugin.utils"
        },
        {
            "file": "src\\components\\map\\extensions\\hexagons\\utils\\hexagonMath.js",
            "line": 68,
            "itemtype": "method",
            "name": "getHexagonPoints",
            "static": 1,
            "params": [
                {
                    "name": "radius",
                    "description": "radius of the hexagon",
                    "type": "Float"
                },
                {
                    "name": "options",
                    "description": "extra options, like generating horizontal hexagon points and\nhow many decimals to round",
                    "type": "Object"
                }
            ],
            "class": "hexagonPlugin.utils"
        },
        {
            "file": "src\\components\\map\\extensions\\hexagons\\utils\\hexagonMath.js",
            "line": 98,
            "description": "Test do the given coordinates hit the hexagon, given by the points container / array",
            "static": 1,
            "itemtype": "method",
            "name": "hexaHitTest",
            "params": [
                {
                    "name": "points",
                    "description": "Array of PIXI.points",
                    "type": "PIXI.Point[]"
                },
                {
                    "name": "hitCoords",
                    "description": "The coordinates to test against",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "offsetCoords",
                    "description": "offsetCoordinates that are added to the hitCoordinates. Separate because these are outside the given array.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "Integer"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Is the coordinate inside the hexagon or not",
                "type": "Boolean"
            },
            "class": "hexagonPlugin.utils"
        },
        {
            "file": "src\\components\\map\\extensions\\hexagons\\utils\\hexagonMath.js",
            "line": 129,
            "description": "credits to: https://github.com/substack/point-in-polygon\nTests whether the given point / coordinate is inside the given points. Assuming the points form a polygon",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "pointInPolygon",
            "params": [
                {
                    "name": "point",
                    "description": "The coordinates to test against",
                    "type": "Object"
                },
                {
                    "name": "hitCoords.x",
                    "description": "X coordinate",
                    "type": "Integer"
                },
                {
                    "name": "hitCoords.y",
                    "description": "Y coordinate",
                    "type": "Integer"
                },
                {
                    "name": "vs",
                    "description": "The points of the polygon to test [0] === x-point, [1] === y-point",
                    "type": "Integer[]"
                }
            ],
            "return": {
                "description": "Is the coordinate inside the hexagon or not",
                "type": "Boolean"
            },
            "class": "hexagonPlugin.utils"
        },
        {
            "file": "src\\components\\map\\extensions\\hexagons\\Objects.js",
            "line": 72,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "calculateHexa",
            "params": [
                {
                    "name": "radius",
                    "description": "Hexagon radius",
                    "type": "Number"
                }
            ],
            "class": "hexagonPlugin.ObjectHexaUnit"
        },
        {
            "file": "src\\components\\map\\extensions\\hexagons\\Objects.js",
            "line": 111,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "setAndGetShape",
            "params": [
                {
                    "name": "radius",
                    "description": "Hexagon radius",
                    "type": "Number"
                }
            ],
            "class": "hexagonPlugin.ObjectHexaUnit"
        },
        {
            "file": "src\\components\\map\\extensions\\hexagons\\selectHexagonPlugin.js",
            "line": 31,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "givenMap",
                    "description": "Instantiated Map class object",
                    "type": "Map"
                }
            ],
            "class": "hexagonPlugin.setupObject_select_hexagon"
        },
        {
            "file": "src\\components\\map\\extensions\\hexagons\\selectHexagonPlugin.js",
            "line": 44,
            "itemtype": "method",
            "name": "startClickListener",
            "params": [
                {
                    "name": "map",
                    "description": "Instantiated Map class object",
                    "type": "Map"
                }
            ],
            "class": "hexagonPlugin.setupObject_select_hexagon"
        },
        {
            "file": "src\\components\\map\\extensions\\mapMovement\\mapMovement.js",
            "line": 44,
            "description": "Ínitialize as a plugin",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "map",
                    "description": "Instance of Map",
                    "type": "Map"
                }
            ],
            "class": "mapMovement"
        },
        {
            "file": "src\\components\\map\\extensions\\mapMovement\\mapMovement.js",
            "line": 54,
            "description": "For debugging. Shows the amount of currectly active and inactive subcontainers. Console.logs the data. Also extends window object.",
            "itemtype": "method",
            "name": "window.FlaTWorld_mapMovement_subCheck",
            "static": 1,
            "class": "mapMovement"
        },
        {
            "file": "src\\components\\map\\extensions\\mapMovement\\mapMovement.js",
            "line": 75,
            "description": "For debugging. Sets all primaryLayers subcontainers on the map as visible = true.",
            "itemtype": "method",
            "name": "window.FlaTWorld_mapMovement_deactivate",
            "static": 1,
            "class": "mapMovement"
        },
        {
            "file": "src\\components\\map\\extensions\\mapMovement\\mapMovement.js",
            "line": 92,
            "description": "Ínitialize as a plugin",
            "itemtype": "method",
            "name": "addAll",
            "params": [
                {
                    "name": "map",
                    "description": "Instance of Map",
                    "type": "Map"
                }
            ],
            "class": "mapMovement"
        },
        {
            "file": "src\\components\\map\\extensions\\mapMovement\\mapMovement.js",
            "line": 114,
            "description": "This one checks the that the objects that should currently be visible in the viewport area are visible and outside\nof the viewport objects are set .visible = false. This affect performance a lot. Basically when the map moves, we\nset a check in the future based on the given intervalCheck milliseconds. And immediately after it we check if there\nis another map movement. If there is we set another timeout. This works better with timeouts.\n\nThis uses webWorkers. They seemed to speed up the check, when timing with performance.now.",
            "itemtype": "method",
            "name": "check",
            "params": [
                {
                    "name": "map",
                    "description": "The current Map instance",
                    "type": "Map"
                }
            ],
            "return": {
                "description": "True",
                "type": "Boolean"
            },
            "class": "mapMovement"
        },
        {
            "file": "src\\components\\map\\extensions\\mapMovement\\mapMovement.js",
            "line": 191,
            "itemtype": "method",
            "name": "startEventListeners",
            "params": [
                {
                    "name": "map",
                    "description": "Instance of Map",
                    "type": "Map"
                }
            ],
            "class": "mapMovement"
        },
        {
            "file": "src\\components\\map\\extensions\\mapMovement\\mapMovement.js",
            "line": 213,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "isObjectOutsideViewport",
            "params": [
                {
                    "name": "object",
                    "description": "Object / layer we are testing",
                    "type": "Object"
                },
                {
                    "name": "viewportArea",
                    "description": "ViewportArea location and size",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "width",
                            "description": "Viewports width (in pixels)",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "Viewports height (in pixels)",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "hasParent",
                    "description": "default = true",
                    "type": "Boolean"
                },
                {
                    "name": "scale",
                    "description": "default = 1 (equals to no defaul scale / no scale)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "mapMovement"
        },
        {
            "file": "src\\components\\map\\extensions\\mapMovement\\mapMovement.js",
            "line": 236,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "getViewportsRightSideCoordinates",
            "params": [
                {
                    "name": "viewportArea",
                    "description": "ViewportArea location and size",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "width",
                            "description": "Viewports width (in pixels)",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "Viewports height (in pixels)",
                            "type": "Integer"
                        }
                    ]
                }
            ],
            "class": "mapMovement"
        },
        {
            "file": "src\\components\\map\\extensions\\mapMovement\\mapMovement.js",
            "line": 257,
            "description": "Calculates and modifies coordinates and size according to current scale / zoom on the map.",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "applyScaleToViewport",
            "params": [
                {
                    "name": "viewportArea",
                    "description": "ViewportArea location and size",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "Integer"
                        },
                        {
                            "name": "width",
                            "description": "Viewports width (in pixels)",
                            "type": "Integer"
                        },
                        {
                            "name": "height",
                            "description": "Viewports height (in pixels)",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "scale",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "mapMovement"
        },
        {
            "file": "src\\components\\map\\extensions\\mapMovement\\mapMovement.js",
            "line": 285,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "testRectangleIntersect",
            "class": "mapMovement"
        },
        {
            "file": "src\\components\\map\\extensions\\mapMovement\\mapMovementWorker.js",
            "line": 65,
            "description": "forms the total viewport parameters based on the given ones.",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "getViewportCoordinates",
            "params": [
                {
                    "name": "viewportArea",
                    "description": "Given viewport area",
                    "type": "AreaSize"
                },
                {
                    "name": "offsetQuantifier",
                    "description": "How big offset we match against",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The total viewportArea",
                "type": "TotalViewportArea"
            },
            "class": "Preload"
        },
        {
            "file": "src\\components\\map\\extensions\\mapMovement\\mapMovementWorker.js",
            "line": 88,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "applyScaleToViewport",
            "params": [
                {
                    "name": "viewportArea",
                    "description": "",
                    "type": "AreaSize"
                },
                {
                    "name": "scale",
                    "description": "Map scale atm.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The total viewportArea",
                "type": "TotalViewportArea"
            },
            "class": "Preload"
        },
        {
            "file": "src\\components\\preloading\\preloading.js",
            "line": 25,
            "itemtype": "method",
            "name": "resolveOnComplete",
            "return": {
                "description": "Return promise object, that will be resolved when the preloading is finished",
                "type": "Promise"
            },
            "class": "Preload"
        },
        {
            "file": "src\\components\\preloading\\preloading.js",
            "line": 40,
            "itemtype": "method",
            "name": "addResource",
            "class": "Preload"
        },
        {
            "file": "src\\components\\preloading\\preloading.js",
            "line": 46,
            "description": "Preload assets",
            "itemtype": "method",
            "name": "loadManifest",
            "class": "Preload"
        },
        {
            "file": "src\\components\\preloading\\preloading.js",
            "line": 54,
            "description": "Error handler if something goes wrong when preloading",
            "itemtype": "method",
            "name": "setErrorHandler",
            "class": "Preload"
        },
        {
            "file": "src\\components\\preloading\\preloading.js",
            "line": 64,
            "description": "Progress handler for loading. You should look easeljs docs for more information",
            "itemtype": "method",
            "name": "setProgressHandler",
            "class": "Preload"
        },
        {
            "file": "src\\components\\preloading\\preloading.js",
            "line": 74,
            "description": "Activate sound preloading also",
            "itemtype": "method",
            "name": "activateSound",
            "class": "Preload"
        },
        {
            "file": "src\\components\\utilities\\environment.js",
            "line": 20,
            "description": "Detect mobile environment",
            "itemtype": "method",
            "name": "isMobile",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "utilities.environmentDetections"
        },
        {
            "file": "src\\components\\utilities\\general.js",
            "line": 21,
            "description": "Flattern 2 levels deep, 2-dimensional arrays. Credits: http://stackoverflow.com/a/15030117/1523545",
            "itemtype": "method",
            "name": "flatten2Levels",
            "params": [
                {
                    "name": "arr",
                    "description": "Array to flatten",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Flattened array",
                "type": "Array"
            },
            "class": "utilities.arrays"
        },
        {
            "file": "src\\components\\utilities\\polyfills.js",
            "line": 24,
            "static": 1,
            "itemtype": "method",
            "name": "arrayFind",
            "class": "generalUtils.polyfills"
        },
        {
            "file": "src\\components\\utilities\\polyfills.js",
            "line": 53,
            "description": "Object.assign IE11 polyfill. Credits to Mozillas folk:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign",
            "itemtype": "method",
            "name": "objectAssign",
            "static": 1,
            "class": "generalUtils.polyfills"
        }
    ],
    "warnings": []
}